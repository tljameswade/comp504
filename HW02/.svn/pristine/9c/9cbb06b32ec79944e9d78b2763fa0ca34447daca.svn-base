package model;

import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.Timer;

import model.ball.ABall;
import util.Dispatcher;
import util.Randomizer;

public class BallModel {

	private IModel2ViewAdapter _model2ViewAdpt = IModel2ViewAdapter.NULL_OBJECT; // Insures that the adapter is always valid

	public BallModel(IModel2ViewAdapter model2ViewAdpt) {
		this._model2ViewAdpt = model2ViewAdpt;
	}

	private int _timeSlice = 50; // update every 50 milliseconds
	private Timer _timer = new Timer(_timeSlice, new ActionListener() {

		/**
		 * The timer "ticks" by calling this method every _timeslice milliseconds
		 */
		public void actionPerformed(ActionEvent e) {
			_model2ViewAdpt.update();
		}
	});

	private Dispatcher myDispatcher = new Dispatcher();

	// Constructor and other fields elided
	// Methods to add sprites (Observers) to the dispatcher elided.

	/**
	 * This is the method that is called by the view's adapter to the model, i.e. is called by IView2ModelAdapter.paint().
	 * This method will update the sprites's painted locations by painting all the sprites
	 * onto the given Graphics object.
	 * @param g The Graphics object from the view's paintComponent() call.
	 */
	public void update(Graphics g) {
		myDispatcher.notifyAll(g); // The Graphics object is being given to all the sprites (Observers)
	}

	public void start() {
		_timer.start();
	}

    private ABall loadBall(String className) {
		try {
			int radius = Randomizer.Singleton.randomInt(5, 20);
			int height = _model2ViewAdpt.getCanvas().getHeight();
			int width = _model2ViewAdpt.getCanvas().getWidth();
			Object[] args = new Object[] { Randomizer.Singleton.randomLoc(new Rectangle(0, 0, width, height)), radius,
					Randomizer.Singleton.randomVel(new Rectangle(0, 0, 5, 15)), Randomizer.Singleton.randomColor(),
					_model2ViewAdpt.getCanvas() };
			java.lang.reflect.Constructor<?> cs[] = Class.forName(className).getConstructors(); // get all the constructors
			java.lang.reflect.Constructor<?> c = null;
			for (int i = 0; i < cs.length; i++) { // find the first constructor with the right number of input parameters
				if (args.length == (cs[i]).getParameterTypes().length) {
					c = cs[i];
					break;
				}
			}
			return (ABall) c.newInstance(args); // Call the constructor.   Will throw a null ptr exception if no constructor with the right number of input parameters was found.
		} catch (Exception ex) {
			System.err.println("Class " + className + " failed to load. \nException = \n" + ex);
			System.out.println("Try again!");
			return null; // Is this really a useful thing to return here?  Is there something better that could be returned? 
		}
	}

	public void makeballs(String classname) {
		ABall ball;
		ball = loadBall(classname);
		myDispatcher.addObserver(ball);
	}

	/**
	* The following method returns an instance of an ABall, given a fully qualified class name (package.classname) of
	* a subclass of ABall.
	* The method assumes that there is only one constructor for the supplied class that has the same *number* of
	* input parameters as specified in the args array and that it conforms to a specific
	* signature, i.e. specific order and types of input parameters in the args array.
	* @param className A string that is the fully qualified class name of the desired object
	* @return An instance of the supplied class. 
	*/

	public void clearballs() {
		myDispatcher.deleteObservers();
	}
}
