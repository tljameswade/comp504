package clientModel.task;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.rmi.RemoteException;

import provided.compute.ILocalTaskViewAdapter;
import provided.compute.ITask;

/**
 * The task that calculate the ith Fiboncacci number.
 * @author Xun Luan, Suozhi Qi
 *
 */
public class Fibo implements ITask<Integer>{

	/**
	 * SerialversionUID for well-defined serialization.
	 */
	private static final long serialVersionUID = -825054884214441374L;

	
	 /**
     * Adapter to the local view.  Marked "transient" so that it is not serialized
     * and instead is reattached at the destination (the server).  
     */
    private transient ILocalTaskViewAdapter taskView = ILocalTaskViewAdapter.DEFAULT_ADAPTER;

    
    /** 
     * The index-th number in fibonacci sequence 
     */
    private final int index;
    
    
    /**
     * Constructor
     * @param parseInt The index of the Fibonacci number.
     */
	public Fibo(int parseInt) {
		// TODO Auto-generated constructor stub
		this.index = parseInt;
        taskView.append("Fibo constructing...\n");
	}
	
	/**
	  * Executes the task and returns a result
	  * @return The result of executing the task.
	  * @throws RemoteException  thrown when a network error occurs.
	  */
	@Override
	public Integer execute() throws RemoteException {
		// TODO Auto-generated method stub
		System.out.println("Server: Executing client's Fibo task...");
	    taskView.append("Server: Executing client's Fibo task...\n");
	    int fibo=calculateFibo(this.index);
	    taskView.append("Server: ");
	    taskView.append("Calculate Fibo...\n");
	    taskView.append("The "+this.index+"th Fibonacci number is: ");
	    taskView.append(fibo+"\n");
	    return fibo;
	}
	
	/**
	 * Calculate the ith Fibonacci number.
	 * @param n The index.
	 * @return Fibonacci number.
	 */
	private int calculateFibo(int n) {
		int[] fiboNum = new int[46];
		
		if (n == 1) return 1;
		if (n == 2) return 1;
		
		fiboNum[0] = 1;
		fiboNum[1] = 1;
		
		for (int i = 2; i < n; i++) {
			fiboNum[i] = fiboNum[i - 1] + fiboNum[i - 2];
		}
		
		return fiboNum[n - 1];
	}
	
	
	/**
     * Reinitializes transient fields upon deserialization.  See the 
     * <a href="http://download.oracle.com/javase/6/docs/api/java/io/Serializable.html">
     * Serializable</a> marker interface docs.
     * taskView is set to a default value for now (ILocalTaskViewAdapter.DEFAULT_ADAPTER).
     * @param stream The object stream with the serialized data
     */
    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
      stream.defaultReadObject(); // Deserialize the non-transient data
      taskView = ILocalTaskViewAdapter.DEFAULT_ADAPTER;  // re-initialize the transient field
    }

    /**
     * Sets the task view adapter to a new value.  Used by the server to attach
     * the task to its view.
     */
    @Override
    public void setTaskViewAdapter(ILocalTaskViewAdapter viewAdapter) {
      taskView = viewAdapter;
    }

}
