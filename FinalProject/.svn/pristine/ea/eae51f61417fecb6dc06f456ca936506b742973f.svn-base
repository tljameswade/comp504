<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (1.8.0_91) on Sat Dec 10 22:57:24 PST 2016 -->
<title>ICmd2ModelAdapter</title>
<meta name="date" content="2016-12-10">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
<script type="text/javascript" src="../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="ICmd2ModelAdapter";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/ICmd2ModelAdapter.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../common/IChatServer.html" title="interface in common"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../common/IComponentFactory.html" title="interface in common"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?common/ICmd2ModelAdapter.html" target="_top">Frames</a></li>
<li><a href="ICmd2ModelAdapter.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">common</div>
<h2 title="Interface ICmd2ModelAdapter" class="title">Interface ICmd2ModelAdapter</h2>
</div>
<div class="contentContainer">
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public interface <span class="typeNameLabel">ICmd2ModelAdapter</span></pre>
<div class="block">ICmd2ModelAdapter interface is used to handle unknown types</div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t3" class="tableTab"><span><a href="javascript:show(4);">Abstract Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../common/ICmd2ModelAdapter.html#buildComponentInNonScrollable-common.IComponentFactory-">buildComponentInNonScrollable</a></span>(<a href="../common/IComponentFactory.html" title="interface in common">IComponentFactory</a>&nbsp;fac)</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../common/ICmd2ModelAdapter.html#buildComponentInScrollable-common.IComponentFactory-">buildComponentInScrollable</a></span>(<a href="../common/IComponentFactory.html" title="interface in common">IComponentFactory</a>&nbsp;fac)</code>
<div class="block">Call fac.make() to get a component, like JPanel or JLabel, and put it somewhere in your view.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code><a href="../common/IChatServer.html" title="interface in common">IChatServer</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../common/ICmd2ModelAdapter.html#getChatServer--">getChatServer</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;T</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../common/ICmd2ModelAdapter.html#getFromLocalDict-provided.mixedData.MixedDataKey-">getFromLocalDict</a></span>(<a href="../provided/mixedData/MixedDataKey.html" title="class in provided.mixedData">MixedDataKey</a>&lt;T&gt;&nbsp;key)</code>
<div class="block">TIP: As a game dispatcher, you should probably generate your key when making an instance of this cmd in your local (mini)model.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../common/ICmd2ModelAdapter.html#putIntoLocalDict-provided.mixedData.MixedDataKey-T-">putIntoLocalDict</a></span>(<a href="../provided/mixedData/MixedDataKey.html" title="class in provided.mixedData">MixedDataKey</a>&lt;T&gt;&nbsp;key,
                T&nbsp;value)</code>
<div class="block">TIP: As a game dispatcher, you should probably generate your key when making an instance of this cmd in your local (mini)model.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>&lt;T extends <a href="../common/msg/IChatMsg.html" title="interface in common.msg">IChatMsg</a>&gt;<br>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../common/ICmd2ModelAdapter.html#sendMsg2LocalChatroom-java.lang.Class-T-">sendMsg2LocalChatroom</a></span>(java.lang.Class&lt;T&gt;&nbsp;index,
                     T&nbsp;msg)</code>
<div class="block">send a message to the local chatroom</div>
</td>
</tr>
</table>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="buildComponentInScrollable-common.IComponentFactory-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>buildComponentInScrollable</h4>
<pre>void&nbsp;buildComponentInScrollable(<a href="../common/IComponentFactory.html" title="interface in common">IComponentFactory</a>&nbsp;fac)</pre>
<div class="block">Call fac.make() to get a component, like JPanel or JLabel, and put it somewhere in your view.
 For example, you can put it in a scrollable panel or a new pop-up JFrame.
 Usually, you need to implement this method to let it go all the way to the view to put the component that fac.make() returns.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>fac</code> - Component factory.</dd>
</dl>
</li>
</ul>
<a name="buildComponentInNonScrollable-common.IComponentFactory-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>buildComponentInNonScrollable</h4>
<pre>void&nbsp;buildComponentInNonScrollable(<a href="../common/IComponentFactory.html" title="interface in common">IComponentFactory</a>&nbsp;fac)</pre>
</li>
</ul>
<a name="putIntoLocalDict-provided.mixedData.MixedDataKey-java.lang.Object-">
<!--   -->
</a><a name="putIntoLocalDict-provided.mixedData.MixedDataKey-T-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>putIntoLocalDict</h4>
<pre>&lt;T&gt;&nbsp;boolean&nbsp;putIntoLocalDict(<a href="../provided/mixedData/MixedDataKey.html" title="class in provided.mixedData">MixedDataKey</a>&lt;T&gt;&nbsp;key,
                             T&nbsp;value)</pre>
<div class="block">TIP: As a game dispatcher, you should probably generate your key when making an instance of this cmd in your local (mini)model.
  
 Put the data you want to store locally in the machine of a game receiver, in the format of (key,value) pair.
 For example, you can store an adapter to the game MVC you create on other's machine, or the computation results you want to use again in a later cmd.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>key</code> - The key for type T that you specify for the following value.</dd>
<dd><code>value</code> - The thing, of type T, you wish to store in local MixedData dictionary.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>True if put successfully. Otherwise false.</dd>
</dl>
</li>
</ul>
<a name="getFromLocalDict-provided.mixedData.MixedDataKey-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getFromLocalDict</h4>
<pre>&lt;T&gt;&nbsp;T&nbsp;getFromLocalDict(<a href="../provided/mixedData/MixedDataKey.html" title="class in provided.mixedData">MixedDataKey</a>&lt;T&gt;&nbsp;key)</pre>
<div class="block">TIP: As a game dispatcher, you should probably generate your key when making an instance of this cmd in your local (mini)model.
  
 Get the data you want, which is stored locally in the machine of a game receiver.
 For example, you can get an adapter to the game MVC you create on other's machine in some preceding cmd, or the computation results you created before in a preceding cmd.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>key</code> - The key to get certain value of type T from the local MixedData dictionary.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A value of type T.</dd>
</dl>
</li>
</ul>
<a name="sendMsg2LocalChatroom-java.lang.Class-common.msg.IChatMsg-">
<!--   -->
</a><a name="sendMsg2LocalChatroom-java.lang.Class-T-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sendMsg2LocalChatroom</h4>
<pre>&lt;T extends <a href="../common/msg/IChatMsg.html" title="interface in common.msg">IChatMsg</a>&gt;&nbsp;void&nbsp;sendMsg2LocalChatroom(java.lang.Class&lt;T&gt;&nbsp;index,
                                                T&nbsp;msg)</pre>
<div class="block">send a message to the local chatroom</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>index</code> - Index value for the message given message type</dd>
<dd><code>msg</code> - Message object</dd>
</dl>
</li>
</ul>
<a name="getChatServer--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>getChatServer</h4>
<pre><a href="../common/IChatServer.html" title="interface in common">IChatServer</a>&nbsp;getChatServer()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The ChatServer who is processing this cmd.</dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/ICmd2ModelAdapter.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../common/IChatServer.html" title="interface in common"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../common/IComponentFactory.html" title="interface in common"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?common/ICmd2ModelAdapter.html" target="_top">Frames</a></li>
<li><a href="ICmd2ModelAdapter.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
