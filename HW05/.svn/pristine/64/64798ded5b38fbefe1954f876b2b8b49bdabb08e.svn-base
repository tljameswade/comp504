package model;

import java.awt.Point;
import java.util.Observable;
import java.util.Observer;

import model.Strategy.IUpdateStrategy;
import util.Dispatcher;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;

/**
 * The abstract ball class that will be extended to several concrete subclasses
 * @author Suozhi Qi, Xiang Li
 * @version 1.0
 *
 */
public class Ball implements Observer {
	/**
	 * The location of the ball
	 */
	private Point location;

	/**
	 * The radius of the ball
	 */
	private int radius;

	/**
	 * The velocity of the ball during moving, which is represented by a Point
	 */
	private Point velocity;

	/**
	 * The color of the ball
	 */
	private Color color;

	/**
	 * The canvas
	 */
	Component Canvas;

	private IUpdateStrategy updatestrategy;
	
	private IPaintStrategy paintStrategy;

	/**
	 * The constructor of the ABall
	 * @param StartLoc The starting location of the ball
	 * @param startRadius The starting radius of the ball
	 * @param startVel The starting velocity of the ball
	 * @param startColor The starting color of the ball
	 * @param theCanvas The canvas
	 * @param updatestrategy The strategy that the ball will use
	 * @param paintStrategy 
	 */
	public Ball(Point StartLoc, int startRadius, Point startVel, Color startColor, Component theCanvas,
			IUpdateStrategy updatestrategy, IPaintStrategy paintStrategy) {
		this.setLocation(StartLoc);
		this.setRadius(startRadius);
		this.setVelocity(startVel);
		this.setColor(startColor);
		this.Canvas = theCanvas;
		this.updatestrategy = updatestrategy;
		this.setPaintStrategy(paintStrategy);
	}
	
	/**
	 * @return pint 
	 */
	public Point getLocation() {
		return location;
	}
	
	/**
	 * @param location
	 */
	public void setLocation(Point location) {
		this.location = location;
	}

	/**
	 * @return velocity 
	 */
	public Point getVelocity() {
		return velocity;
	}

	/**
	 * @param velocity
	 */
	public void setVelocity(Point velocity) {
		this.velocity = velocity;
	}

	/**
	 * @return color
	 */
	public Color getColor() {
		return color;
	}

	/**
	 * @param color
	 */
	public void setColor(Color color) {
		this.color = color;
	}

	/**
	 * @return radius
	 */
	public int getRadius() {
		return radius;
	}

	/**
	 * @param radius
	 */
	public void setRadius(int radius) {
		this.radius = radius;
	}
	
	/**
	 * @param canvas
	 */
	public void setCanvas(Component canvas) {
		this.Canvas = canvas;
	}
	
	/**
	 * @return canvas
	 */
	public Component getCanvas() {
		return Canvas;
	}

	/**
	 * @return paint strategy
	 */
	public IPaintStrategy getPaintStrategy() {
		return paintStrategy;
	}

	/**
	 * @param paintStrategy
	 */
	public void setPaintStrategy(IPaintStrategy paintStrategy) {
		this.paintStrategy = paintStrategy;
		this.paintStrategy.init(this);
	}

	/**
	 * The update method called by the main ball Dispatcher to notify all the balls to perform the given command.
	 * The given command is executed.
	 * @param o The Dispatcher that sent the update request.
	 * @param cmd The IBallCmd that will be run.
	 */
	public void update(Observable o, Object cmd) {
	    ((IBallCmd)cmd).apply(this, (Dispatcher) o);
	}

	/**
	 * This method paints the ball
	 * @param g The graphics object
	 */
	void paint(Graphics g) {
		paintStrategy.paint(g, this);
	}

	/**
	 * This method simulate the movement of the ball
	 */
	void move() {
		location.x += getVelocity().x;
		location.y += getVelocity().y;
	}

	/**
	 * This method calls different properties of the ball in different subclasses
	 * and can be overriden in concrete subclasses
	 */
	void differentBalls() {
	}
	
	/**
	 * Update the state of the ball.   Delegates to the update strategy.
	 * @param dispatcher The Dispatcher that sent the command that is calling this method.
	 */
	public void updateState(Dispatcher dispatcher){
		updatestrategy.updateState(this, dispatcher); // update this ball's state using the strategy.		
	}

	/**
	 * This method simulate the bouncing behavior of the ball
	 */
	void bounce() {
		if (location.x - getRadius() < 0) {
			getVelocity().x = -getVelocity().x;
			location.x = getRadius() * 2 - location.x;
		}

		if (location.y - getRadius() < 0) {
			getVelocity().y = -getVelocity().y;
			location.y = getRadius() * 2 - location.y;
		}

		if (location.x + getRadius() > Canvas.getWidth()) {
			getVelocity().x = -getVelocity().x;
			location.x = 2 * (Canvas.getWidth() - getRadius()) - location.x;
		}

		if (location.y + getRadius() > Canvas.getHeight()) {
			getVelocity().y = -getVelocity().y;
			location.y = 2 * (Canvas.getHeight() - getRadius()) - location.y;
		}
	}

}
