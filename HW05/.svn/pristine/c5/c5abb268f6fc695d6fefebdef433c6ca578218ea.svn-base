package model;

import util.IDispatcher;

/**
 * this class is used when combine two strategy
 * there are two variants
 * @author Suozhi Qi,Zhanhan Jia
 *
 */
public class MultiStrategy<TDispMsg> implements IUpdateStrategy<TDispMsg> {

	/**
	 * One of the strategies to be combined
	 */
	IUpdateStrategy<TDispMsg> s1;

	/**
	 * The other one of the strategies to be combined
	 */
	IUpdateStrategy<TDispMsg> s2;

	/**
	 * The multistrategy constructor to take two strategies
	 * @param s1 One of the strategies to be combined
	 * @param s2 The other one of the strategies to be combined
	 */
	public MultiStrategy(IUpdateStrategy<TDispMsg> s1, IUpdateStrategy<TDispMsg> s2) {
		this.s1 = s1;
		this.s2 = s2;
	}

	@Override
	public void init(Ball context) {
	}
	
	/**
	 * when update, features of both strategies will be updated
	 */
	@Override
	public void updateState(Ball context, IDispatcher<TDispMsg> dispatcher) {
		s1.updateState(context, dispatcher);
		s2.updateState(context, dispatcher);
	}

}
