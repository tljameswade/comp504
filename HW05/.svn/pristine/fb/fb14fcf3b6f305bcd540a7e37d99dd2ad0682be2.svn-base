package model;

import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.Timer;

import model.Strategy.IStrategyFac;
import model.Strategy.IUpdateStrategy;
import model.Strategy.SwitcherStrategy;
import util.Dispatcher;
import util.Randomizer;

/**
 * The model class
 * @author SuozhiQi,HongyangZhang
 * @version 1.0
 *
 */

public class BallModel {

	/**
	 * Construct the model to view adapter
	 */
	private IModel2ViewAdapter _model2ViewAdpt = IModel2ViewAdapter.NULL_OBJECT;

	/**
	 * The model class constructor
	 * @param model2ViewAdpt is an object of the model to view adapter
	 */
	public BallModel(IModel2ViewAdapter model2ViewAdpt) {
		this._model2ViewAdpt = model2ViewAdpt;
	}

	/**
	 * The time interval in milliseconds
	 */
	private int _timeSlice = 50;

	/**
	 * The timer
	 */
	private Timer _timer = new Timer(_timeSlice, new ActionListener() {

		/**
		 * The timer "ticks" by calling this method every _timeslice milliseconds
		 */
		public void actionPerformed(ActionEvent e) {
			_model2ViewAdpt.update();
		}
	});

	/**
	 * The dispatcher for adding and removing balls
	 */
	private Dispatcher myDispatcher = new Dispatcher();

	SwitcherStrategy s1;
	
	private Timer painttimer = new Timer(_timeSlice, new ActionListener() {

		/**
		 * The timer "ticks" by calling this method every _timeslice milliseconds
		 */
		public void actionPerformed(ActionEvent e) {
			myDispatcher.notifyAll(new IBallCmd() {
				public void apply(Ball context, Dispatcher disp) {
					context.updateState(disp);
					context.bounce();
					context.move();
				}
			});
		}
		});		

		

	/**
	 * This is the method that is called by the view's adapter to the model, i.e. is called by IView2ModelAdapter.paint().
	 * This method will update the sprites's painted locations by painting all the sprites
	 * onto the given Graphics object.
	 * @param g The Graphics object from the view's paintComponent() call.
	 */
	public void update(Graphics g) {
		myDispatcher.notifyAll(new IBallCmd() {
			public void apply(Ball context, Dispatcher disp) {
				context.paint(g);
			}
		});	
	}

	/**
	 * Start the timer
	 */
	public void start() {
		_timer.start();
		painttimer.start();
	}

	/**
	 * Part if the following code in the loadBall(String) function is derived from
	 * "https://www.clear.rice.edu/comp310/JavaResources/dynamic_class_load.html", 
	 * which accords with the homework instruction 
	 * 
	 * The following method returns an instance of an ABall, given a fully qualified class name (package.classname) of
	 * a subclass of ABall.
	 * The method assumes that there is only one constructor for the supplied class that has the same *number* of
	 * input parameters as specified in the args array and that it conforms to a specific
	 * signature, i.e. specific order and types of input parameters in the args array.
	 * @param className A string that is the fully qualified class name of the desired object
	 * @return An instance of the supplied class. 
	 */

	private IUpdateStrategy loadStrategy(String className) {
		try {
			Object[] args = new Object[] {};
			java.lang.reflect.Constructor<?> cs[] = Class.forName(className).getConstructors(); // get all the constructors
			java.lang.reflect.Constructor<?> c = null;
			for (int i = 0; i < cs.length; i++) { // find the first constructor with the right number of input parameters
				if (args.length == (cs[i]).getParameterTypes().length) {
					c = cs[i];
					break;
				}
			}
			return (IUpdateStrategy) c.newInstance(args); // Call the constructor.   Will throw a null ptr exception if no constructor with the right number of input parameters was found.
		} catch (Exception ex) {
			System.err.println("Class " + className + " failed to load. \nException = \n" + ex);
			System.out.println("Try again!");
			return null;
		}
	}
	
	private IPaintStrategy loadPaintStrategy(String className) {
		try {
			Object[] args = new Object[] {};
			java.lang.reflect.Constructor<?> cs[] = Class.forName(className).getConstructors(); // get all the constructors
			java.lang.reflect.Constructor<?> c = null;
			for (int i = 0; i < cs.length; i++) { // find the first constructor with the right number of input parameters
				if (args.length == (cs[i]).getParameterTypes().length) {
					c = cs[i];
					break;
				}
			}
			return (IPaintStrategy) c.newInstance(args); // Call the constructor.   Will throw a null ptr exception if no constructor with the right number of input parameters was found.
		} catch (Exception ex) {
			System.err.println("Class " + className + " failed to load. \nException = \n" + ex);
			System.out.println("Try again!");
			return null;
		}
	}

	/**
	 * This method add an ABall loaded by the loadBall method to the dispatcher
	 * @param s1 The strategy that the ball to be made will use
	 */
	public void makeballs(IUpdateStrategy s1, IPaintStrategy p1) {
		int radius = Randomizer.Singleton.randomInt(5, 20);
		int height = _model2ViewAdpt.getCanvas().getHeight();
		int width = _model2ViewAdpt.getCanvas().getWidth();
		Ball ball = new Ball(Randomizer.Singleton.randomLoc(new Rectangle(0, 0, width, height)), radius,
				Randomizer.Singleton.randomVel(new Rectangle(0, 0, 5, 15)), Randomizer.Singleton.randomColor(),
				_model2ViewAdpt.getCanvas(), s1, p1);
		myDispatcher.addObserver(ball);
	}

	/**
	 * This method clear all of the balls on the canvas by deleting all the sprites in the dispatcher
	 */
	public void clearballs() {
		myDispatcher.deleteObservers();
	}

	/**
	 * A factory for a beeping error strategy that beeps the speaker every 25 updates.
	 * Either use the _errorStrategyFac variable directly if you need a factory that makes an error strategy,
	 * or call _errorStrategyFac.make() to create an instance of a beeping error strategy.
	 */
	private IStrategyFac _errorStrategyFac = new IStrategyFac() {
		@Override
		/**
		 * Make the beeping error strategy
		 * @return  An instance of a beeping error strategy
		 */
		public IUpdateStrategy make() {
			return new IUpdateStrategy() {
				private int count = 0; // update counter

				@Override
				/**
				 * Beep the speaker every 25 updates
				 */
				public void updateState(Ball context, Dispatcher dispatcher) {
					if (25 < count++) {
						java.awt.Toolkit.getDefaultToolkit().beep();
						count = 0;
					}
				}
			};
		}
	};
	
	private IPaintStrategyFac _errorPaintStrategyFac = new IPaintStrategyFac() {
		public IPaintStrategy make() {
			return IPaintStrategy.NULL_OBJECT;
		}
	};

	/**
	 * Returns an IStrategyFac that can instantiate the strategy specified by
	 * classname. Returns a factory for a beeping error strategy if classname is null. 
	 * The toString() of the returned factory is the classname.
	 * 
	 * @param classname  Shortened name of desired strategy
	 * @return A factory to make that strategy
	 */
	public IStrategyFac makeStrategyFac(final String classname) {
		if (null == classname)
			return _errorStrategyFac;
		return new IStrategyFac() {
			/**
			 * Instantiate a strategy corresponding to the given class name.
			 * @return An IUpdateStrategy instance
			 */
			public IUpdateStrategy make() {
				IUpdateStrategy updateStrategy = loadStrategy(fixName(classname));				
				if (updateStrategy == null) {
					return _errorStrategyFac.make();}			
				return updateStrategy;
			}

			/**
			 * Return the given class name string
			 */
			public String toString() {
				return classname;
			}
		};
	}
	
	public IPaintStrategyFac makePaintStrategyFac(final String classname) {
		if (null == classname)
			return _errorPaintStrategyFac;
		return new IPaintStrategyFac() {
			/**
			 * Instantiate a strategy corresponding to the given class name.
			 * @return An IUpdateStrategy instance
			 */
			public IPaintStrategy make() {
				IPaintStrategy paintStrategy = loadPaintStrategy(fixName(classname));				
				if (paintStrategy == null) return _errorPaintStrategyFac.make();			
				return paintStrategy;
			}

			/**
			 * Return the given class name string
			 */
			public String toString() {
				return classname;
			}
		};
	}

	/**
	 * 
	 * @param classname text in textField
	 * @return can be used in reflection
	 */
	public String fixName(String classname) {
		return "model.Strategy." + classname + "Strategy";
	}

	/**
	 * Returns an IStrategyFac that can instantiate a MultiStrategy with the two
	 * strategies made by the two given IStrategyFac objects. Returns null if
	 * either supplied factory is null. The toString() of the returned factory
	 * is the toString()'s of the two given factories, concatenated with "-". 
	 * If either factory is null, then a factory for a beeping error strategy is returned.
	 * 
	 * @param stratFac1 An IStrategyFac for a strategy
	 * @param stratFac2 An IStrategyFac for a strategy
	 * @return An IStrategyFac for the composition of the two strategies
	 */
	public IStrategyFac combineStrategyFacs(final IStrategyFac stratFac1, final IStrategyFac stratFac2) {
		if (null == stratFac1 || null == stratFac2)
			return _errorStrategyFac;
		return new IStrategyFac() {
			/**
			 * Instantiate a new MultiStrategy with the strategies from the given strategy factories
			 * @return A MultiStrategy instance
			 */
			public IUpdateStrategy make() {
				return new MultiStrategy(stratFac1.make(), stratFac2.make());
			}

			/**
			 * Return a string that is the toString()'s of the given strategy factories concatenated with a "-"
			 */
			public String toString() {
				return stratFac1.toString() + "-" + stratFac2.toString();
			}
		};
	}

	/**
	 * this function will switch a ball to a new state
	 * @param strategy newStrategy needed to be updated
	 */
	public void SetSwitcherStrategy(IUpdateStrategy strategy) {
		if (s1 != null) {
			s1.setStrategy(strategy);
		}
	}

	/**
	* make a default SwithcherStrategy ball
	* @return SwitcherStrategy
	*/
	public IUpdateStrategy getSwitcherStrategy() {
		if (s1 == null)
			s1 = new SwitcherStrategy();
		return s1;
	}
}

