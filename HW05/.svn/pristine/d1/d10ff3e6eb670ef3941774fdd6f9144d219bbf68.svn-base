package model.Strategy;

import model.Ball;
import model.IBallCmd;
import model.IUpdateStrategy;
import util.IDispatcher;

/**
 * The DareToDieStrategy of the ball, which kill itself and other ball when collides.
 * 
 * @author Suozhi Qi
 * @author Zhaohan Jia
 * @version 1.0
 * @since 1.0
 * 
 * @param <TDispMsg> The dispatcher message.
 */
public class DareToDieStrategy<TDispMsg> implements IUpdateStrategy<IBallCmd> {
	/**
	 * The init method no-op.
	 * @param context The context ball.
	 */
	@Override
	public void init(Ball context) {	
	}

	/**
	 * The update status method of DareToDie.
	 * @param ball Current ball with the context.
	 * @param dispatcher The dispatcher is used.
	 */
	@Override
	public void updateState(Ball ball, IDispatcher<IBallCmd> dispatcher) {
		dispatcher.dispatch(new IBallCmd(){
			@Override
			public void apply(Ball other, IDispatcher<IBallCmd> dispatcher) {
				if(ball!=other){
					double distance = ball.getLocation().distance(other.getLocation());
					if( distance<=(ball.getRadius()+other.getRadius()) ){
						dispatcher.deleteObserver(ball);
						dispatcher.deleteObserver(other);
					}
				}
			}
		});
	}
}
