package controller;

import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Graphics;

import model.BallModel;
import view.BallGUI;
import view.IModelControlAdapter;
import view.IModelPaintAdapter;
import model.IModel2ViewAdapter;
import model.Strategy.*;

/**
 * MVC Controller for the system
 * @author SuozhiQi, HongyangZhang
 * @version 1.0
 * 
 */
public class Controller {

	/**
	 * The model side object
	 */
	private BallModel model;

	/**
	 * The view side object
	 */
	@SuppressWarnings("rawtypes")
	private BallGUI view;

	/**
	 * Controller constructor builds the system
	 */
	public Controller() {
		model = new BallModel(new IModel2ViewAdapter() {
			@Override
			public Component getCanvas() {
				return view.getCanvas();
			}

			@Override
			public void update() {
				view.update();
			}
		});

		view = new BallGUI<IStrategyFac>(new IModelControlAdapter<IStrategyFac>() {

			@Override
			/**
			* Returns an IStrategyFac that can instantiate the strategy specified
			* by classname. Returns null if classname is null. The toString() of
			* the returned factory is the classname.
			* @param classname  Shortened name of desired strategy 
			* @return A factory to make that strategy
			*/
			public IStrategyFac addStrategy(String classname) {
				return model.makeStrategyFac(classname);
			}

			@Override
			/**
			* Add a ball to the system with a strategy as given by the given IStrategyFac
			* @param selectedItem The fully qualified name of the desired strategy.
			*/
			public void loadBall(IStrategyFac selectedItem) {
				if (null != selectedItem)
					model.makeballs(selectedItem.make()); // Here, loadBall takes a strategy object, but your method may take the strategy factory instead.
			}

			@Override
			/**
			* Returns an IStrategyFac that can instantiate a MultiStrategy with the
			* two strategies made by the two given IStrategyFac objects. Returns
			* null if either supplied factory is null. The toString() of the
			* returned factory is the toString()'s of the two given factories,
			* concatenated with "-".             * 
			* @param selectedItem1 An IStrategyFac for a strategy
			* @param selectedItem2 An IStrategyFac for a strategy
			* @return An IStrategyFac for the composition of the two strategies
			*/
			public IStrategyFac combineStrategies(IStrategyFac selectedItem1, IStrategyFac selectedItem2) {
				return model.combineStrategyFacs(selectedItem1, selectedItem2);
			}

			/**
			 * implements the clearballs function in BallModel
			 */
			@Override
			public void clearballs() {
				model.clearballs();
			}

			/**
			 * make a default StraightStrategy ball as a SwitcherStrategy ball
			 */
			@Override
			public void makeSwitcher() {
				model.makeballs(model.getSwitcherStrategy());
			}

			/**
			 * switch balls to a new strategy
			 * @param selectedItem1 An IStrategyFac for a strategy
			
			 */
			@Override
			public void SwitchStrategy(IStrategyFac selectedItem) {
				if (selectedItem != null) {
					model.SetSwitcherStrategy(selectedItem.make());
				}
			}

		}, new IModelPaintAdapter() {
			/**
			* Pass the update request to the model.
			* @param g The Graphics object the balls use to draw themselves.
			*/
			public void paint(Graphics g) {
				model.update(g);
			}
		});
	}

	/**
	 * Start the system
	 */
	public void start() {
		model.start();
		view.start();
	}

	/**
	 * Launch the application.
	 * @param args Arguments given by the system or command line.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Controller controller = new Controller();
					controller.start();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
}
